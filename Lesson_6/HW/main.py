"""
Написать программу на любом языке в любой парадигме для
бинарного поиска. На вход подаётся целочисленный массив и
число. На выходе - индекс элемента или -1, в случае если искомого
элемента нет в массиве.

Определим функцию с названием binary_search(), которая принимает отсортированный список arr и целевой элемент target.
Внутри неё сначала создадим переменные low и high для определения границ поиска.
low равна нулю (первому индексу списка), а high — индексу последнего элемента списка
Цикл while будет работать до тех пор, пока low не станет больше high.
Внутри цикла вычислим средний индекс mid и сравниваем элемент в середине списка с целевым элементом (target).
While работает по принципу индексов. (0 + 5)/2 low = 0(начальный индекс), high = 5(конечный индекс)
Если элемент меньше целевого, то значение в low будет обновляться, чтобы исключить левую половину списка из поиска.
Если элемент больше целевого, то значение будет обновляться уже в high,
чтобы исключить правую половину списка из поиска.
"""

from random import randint


def random_arr(arr):
    """
   Метод генерирования рандомного массива
    """
    for i in range(10):
        arr.append(randint(1, 50))
    arr.sort()
    return arr


def binary_search(arr, target):
    low = 0
    high = len(arr) - 1

    while low <= high:
        mid = (low + high) // 2

        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1

    return -1


array_ = []
random_arr(array_)
print(f"Созданный и отсортированный массив: {array_}")
target = int(input("Какое число хотите найти в массиве?: "))

result = binary_search(array_, target)
if result == -1:
    print("Элемент не найден")
else:
    print(f"Элемент располагается по индексу {result + 1}")
