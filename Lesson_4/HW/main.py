"""
Расчет коэффициента корреляции Пирсона
Для расчета коэффициента корреляции Пирсона необходимо иметь два набора данных,
каждый из которых должен состоять из одного и того же количества элементов.
Далее производится следующий алгоритм:

1. Находим среднее арифметическое значение каждого набора данных.
Для этого нужно сложить все значения набора данных и разделить их на количество элементов.
2. Находим среднеквадратическое отклонение для каждого набора данных.
Для этого нужно для каждого элемента набора данных вычесть из него среднее арифметическое значение,
возвести полученное различие в квадрат, сложить все полученные квадраты и разделить на количество элементов минус один,
после чего извлечь корень из полученного значения.
3. Вычисляем корреляционный коэффициент Пирсона. Для этого необходимо найти ковариацию между двумя наборами данных,
то есть умножить разности между каждым элементом набора данных и его средним значением,
а затем сложить все полученные произведения. Затем результат полученной суммы нужно разделить на произведение
среднеквадратических отклонений двух наборов данных.

X и y - это два вектора длины n
m, x и m, y соответствуют средним значениям x и y соответственно.
"""
import math


def pearson_correlations(array_x, array_y):
    """
    Создаем переменные для решения задачи.
    half - среднее арифметическое значение
    """
    half_x = sum(array_x) / len(array_x)
    half_y = sum(array_y) / len(array_y)

    """
    С помощью генератора списка (List Comprehension) проходим по и записываем сумму.
    Далее с помощью функции zip объединяем два массива в один массив состоящий из кортежей. Если не использоваться zip 
    covariance = sum([(xi - half_x) * (yi - half_y) for xi in array_x for yi in array_y]) / 
    float( len(array_x) * len(array_y)) то всегда выводит -0.0
    После производим деление на корень
    """
    variance_x = sum([(xi - half_x) ** 2 for xi in array_x]) / float(len(array_x) - 1)
    variance_y = sum([(yi - half_y) ** 2 for yi in array_y]) / float(len(array_y) - 1)

    covariance = sum([(xi - half_x) * (yi - half_y) for xi, yi in zip(array_x, array_y)]) / float(
        len(array_x) * len(array_y))
    correlation = covariance / (math.sqrt(variance_x * variance_y))
    return correlation


array_x = [1, 2, 3, 8, 9]
array_y = [7, 6, 5, 4, 3]

correlation = (pearson_correlations(array_x, array_y))
print(f"Корреляция Пирсона: {correlation}")

